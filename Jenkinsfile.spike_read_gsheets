
SLACK_CHANNEL = '@jzohrab'


node('sensei_build') {
  try {
    echo 'reading gsheet'
    // append key=yourAPIKey to the request
    // test sheet: https://docs.google.com/spreadsheets/d/1LvuVuXOQ5aA-Eq6a6IiqakaIFt6zIiby7pgRyXgEF1w/edit#gid=1334326171
    def spreadsheet_id = '1LvuVuXOQ5aA-Eq6a6IiqakaIFt6zIiby7pgRyXgEF1w'
    // team_list page id = 1334326171
    // cols A - F:
    // name, git_email, github_user, slack_username, team, email
    def range = 'team_list!A:F'

    // GET https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/range
    def uri = "https://sheets.googleapis.com/v4/spreadsheets/${spreadsheet_id}/values/${range}"
    echo "Calling uri: ${uri}"

  }
  catch(err) {
    echo "Error: ${err}"
    currentBuild.result = 'FAILURE'
  }
}

////////////////////////////////////////////////



////////////////////////////////////
// Native Groovy REST calls
// per https://stackoverflow.com/questions/34682099/how-to-call-rest-from-jenkins-workflow/34875259

HttpResponse doGetHttpRequest(String requestUrl){
  URL url = new URL(requestUrl);
  HttpURLConnection connection = url.openConnection();

  connection.setRequestMethod("GET");

  //get the request
  connection.connect();

  //parse the response
  HttpResponse resp = new HttpResponse(connection);

  if(resp.isFailure()){
      error("\nGET from URL: $requestUrl\n  HTTP Status: $resp.statusCode\n  Message: $resp.message\n  Response Body: $resp.body");
  }

  echo("Request (GET):\n  URL: $requestUrl");
  echo("Response:\n  HTTP Status: $resp.statusCode\n  Message: $resp.message\n  Response Body: $resp.body");

  return resp;
}


HttpResponse doDeleteHttpRequest(String auth_token, String requestUrl){
  URL url = new URL(requestUrl);
  HttpURLConnection connection = url.openConnection();

  def basic_auth = "Basic ${auth_token.bytes.encodeBase64().toString()}"
  connection.setRequestProperty("Authorization", basic_auth);
  connection.setRequestMethod("DELETE");

  connection.connect();

  HttpResponse resp = new HttpResponse(connection);

  if(resp.isFailure()){
      error("\nDELETE from URL: $requestUrl\n  HTTP Status: $resp.statusCode\n  Message: $resp.message\n  Response Body: $resp.body");
  }

  echo("Request (DELETE):\n  URL: $requestUrl");
  echo("Response:\n  HTTP Status: $resp.statusCode\n  Message: $resp.message\n  Response Body: $resp.body");

  return resp;
}


/**
 * Posts the json content to the given url, ensures a 2xx status on the response.
 * If a negative status is returned, an error will be raised and the pipeline will fail.
 */
HttpResponse doPostHttpRequestWithJson(String auth_token, String json, String requestUrl){
  return doHttpRequestWithJson(auth_token, json, requestUrl, "POST");
}

/**
 * Posts the json content to the given url, ensures a 2xx status on the response.
 * If a negative status is returned, an error will be raised and the pipeline will fail.
 */
HttpResponse doPutHttpRequestWithJson(String json, String requestUrl){
  return doHttpRequestWithJson(json, requestUrl, "PUT");
}

/**
 * Post/Put the json content to the given url, ensures a 2xx status on the response.
 * If a negative status is returned, an error will be raised and the pipeline will fail.
 * verb - PUT or POST
 */
HttpResponse doHttpRequestWithJson(String auth_token, String json, String requestUrl, String verb){
  URL url = new URL(requestUrl);
  HttpURLConnection connection = url.openConnection();

  connection.setRequestMethod(verb);
  def basic_auth = "Basic ${auth_token.bytes.encodeBase64().toString()}"
  connection.setRequestProperty("Content-Type", "application/json");
  connection.setRequestProperty("Authorization", basic_auth);
  connection.doOutput = true;

  //write the payload to the body of the request
  def writer = new OutputStreamWriter(connection.outputStream);
  writer.write(json);
  writer.flush();
  writer.close();

  //post the request
  connection.connect();

  //parse the response
  HttpResponse resp = new HttpResponse(connection);

  connection = null;

  if(resp.isFailure()) {
    error("\n$verb to URL: $requestUrl\n    JSON: $json\n    HTTP Status: $resp.statusCode\n    Message: $resp.message\n    Response Body: $resp.body");
  }

  echo("Request ($verb):\n  URL: $requestUrl\n  JSON: $json");
  echo("Response:\n  HTTP Status: $resp.statusCode\n  Message: $resp.message\n  Response Body: $resp.body");

  return resp;
}


class HttpResponse {

  String body;
  String message;
  Integer statusCode;
  boolean failure = false;

  public HttpResponse(HttpURLConnection connection){
    this.statusCode = connection.responseCode;
    this.message = connection.responseMessage;

    if ( statusCode >= 200 && statusCode < 300 ) {
      //this would fail the pipeline if there was a 400
      this.body = connection.content.text;
    } else {
      this.failure = true;
      this.body = connection.getErrorStream().text;
    }
  }
}

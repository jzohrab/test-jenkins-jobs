// Curl site

@Library('genome') _
def senseislack = new org.klick.SenseiSlack()

node('sensei_build') {

  try {
    // powershell curl
    echo "Calling powershell:"

    def myscript = ""
    
    myscript = """
\$ErrorActionPreference = 'SilentlyContinue'
\$request = 'https://genome.klick.com/manifest.json'
Invoke-RestMethod $request | ConvertFrom-Json
"""
    echo powershell(returnStdout: true, script: myscript)

    echo "=================================="
    echo "Calling TRY GETTING SHA:"
    myscript = """
\$ErrorActionPreference = 'SilentlyContinue';
\$request = 'https://genome.klick.com/manifest.json';
Invoke-RestMethod $request | ConvertFrom-Json | select vcs-sha
"""
    echo powershell(returnStdout: true, script: myscript)

    // def msg = [ subject: 'hi', body: 'there', channel: 'jenkins-dev-tests' ]
    // senseislack.post_success(msg)
  }
  catch(err) {
    echo "FAILED: ${err}"
    currentBuild.result = 'FAILURE'
    
    def msg = [ subject: 'failed', body: "ERROR: ${err}", channel: 'jenkins-dev-tests' ]
    senseislack.post_failure(msg)
  }
}


///////////////////////////////////////


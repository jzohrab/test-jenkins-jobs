// Curl site

@Library('genome') _
def senseislack = new org.klick.SenseiSlack()

node('sensei_build') {

  try {

    def check_urls = [
      'https://genome.klick.com/'
    ]

    def results = check_urls.collect { url ->
      def data = get_deployed_sha_from_manifest(url)
      [ site: url, sha: data.sha, error: data.error ]
    }

    echo "Results: ${results}"

    get_untagged_release_branches()
    
    // def msg = [ subject: 'hi', body: 'there', channel: 'jenkins-dev-tests' ]
    // senseislack.post_success(msg)
  }
  catch(err) {
    echo "FAILED: ${err}"
    currentBuild.result = 'FAILURE'
    
    // def msg = [ subject: 'failed', body: "ERROR: ${err}", channel: 'jenkins-dev-tests' ]
    // senseislack.post_failure(msg)
  }
}


///////////////////////////////////////


// Get the sha from the deployed manifest.
def get_deployed_sha_from_manifest(check_URL) {
  def result = [ sha: null, error: null ]
  
  manifest_url = "${check_URL}/manifest.json"
  try {
    // See https://stackoverflow.com/questions/1408042/output-data-with-no-column-headings-using-powershel
    // re "-ExpandProperty" flag.
    def myscript = "Invoke-WebRequest ${manifest_url} | ConvertFrom-Json | Select -ExpandProperty vcs-sha"
    def tmp = powershell(returnStdout: true, script: myscript).trim()
    if (tmp.trim().size() == 0) { tmp = null }
    result.sha = tmp
    if (result.sha == null) {
      result.error = "Null sha (missing vcs-sha from ${manifest_url} ?)"
    }
  }
  catch (err) {
    result.error = "Error getting sha from ${manifest_url}: ${err} (check the log for details)"
  }
  return result
}


def get_untagged_release_branches() {

    withCredentials([usernamePassword(credentialsId: 'github-ci', passwordVariable: 'P', usernameVariable: 'U')]) {
      def cmd = "git ls-remote --heads https://${U}:${P}@github.com/KlickInc/klick-genome"
      def list = sh(returnStdout: true, script: cmd)
      echo "BRANCHES"
      echo "${list}"
      
      cmd = "git ls-remote --tags https://${U}:${P}@github.com/KlickInc/klick-genome"
      list = sh(returnStdout: true, script: cmd)
      echo "TAGS"
      echo "${list}"
    }

}
    
